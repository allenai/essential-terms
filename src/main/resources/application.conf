ari.solvers.common {
  stoplist.selected = "smart"
  useSubstitutions = false
}

ari.solvers.termselector {
  // classifier type: Lookup, LemmaBaseline, Expanded, MasSalience, SumSalience
  classifierType = "Expanded"

  // classifier model used for learning.
  classifierModel = "SVM"

  // if this is set to true, we would not include features that depend on question options
  directAnswerQuestions = false

  // setting this true would cache the input annotations, as well as the scores of the classifiers
  useRedisCaching = true
  hostname = "localhost"
  clientPrefix = "termselector"

  // the list of words given zero confidence score by the essential-terms classifier
  stopwordsDatastoreFile = "datastore://public/org.allenai.termselector/stopwords-v2.txt"

  // pre-trained model from data-store: SVM
  modelsDatastoreFolder = "datastore://public/org.allenai.termselector/models-v5"

  // list of popular science terms
  scienceTermsDatastoreFile = "datastore://public/org.allenai.nlp.resources/science_terms-v1.txt"

  // file containing the annotated questions with essentiality scores
  turkerEssentialityScores = "datastore://private/org.allenai.termselector/turkerSalientTermsWithOmnibus-v3.tsv"

  // regents training questions; to exclude from the training set of essential-terms classifier
  regentsTrainingQuestion = "datastore://private/org.allenai.tableilp.data/regentsTrain-v1.txt"

  // the parameters related to annotations used for the training/testing the the classifiers
  annotation {
    // if this is true, it will look up the missing salience scores; otherwise they will be ignored;
    // turn this option off, if you don't have access to salience annotator (at the cost of losing a few percent)
    checkForMissingSalienceScores = true

    // whether to drop training instances with mid-ranged scores;
    // if set to an array of two real numbers (e.g. [0.4, 0.6]) it will drop the training instances
    // in that range. If empty, it will be ignored.
    filterMidScoreConsitutents = []

    // if this is on, the constituents that belong to the same named-entity will be combined;
    // for example "New Orleans" is two constituents, but it will be collapsed to one, since
    // the constituents belong to one single named-entity.
    combineNamedEntities = false
  }
}

akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
