entailment {
  // If true, use a local entailment service instead of a remote one.
  useLocal = true

  // RemoteEntailer configuration; applicable only when useLocal = false
  remote {
    timeoutMillis = 10000
    url = "http://entailment.dev.ai2:8191/api/entails"
  }

  // LocalEntailer configuration; applicable only when useLocal = true;
  // can be used to choose the entailment algorithm, disable overrides, etc.
  local {}
}

ari.solvers.common {
  stoplist {
    selected = "smart"

    // Stopwords from http://www.lextek.com/manuals/onix/stopwords2.html .
    smart {
      group = "org.allenai.nlp.resources"
      name = "smart_stopwords_2.txt"
      version = 1
    }
  }
  useSubstitutions = false

  entailment {
    // If true, use a local entailment service instead of a remote one.
    useLocal = true

    // RemoteEntailer configuration; applicable only when useLocal = false
    remote {
      timeoutMillis = 10000
      url = "http://entailment.dev.ai2:8191/api/entails"
    }

    // LocalEntailer configuration; applicable only when useLocal = true;
    // can be used to choose the entailment algorithm, disable overrides, etc.
    local {}
  }

  // local per-solver cache for wumpus counts.
  salience.cacheSize = 100000
}

ari.solvers.termselector {
  // classifier type: Lookup, LemmaBaseline, Expanded, MasSalience, SumSalience
  classifierType = "Expanded"

  // classifier model used for learning.
  classifierModel = "SVM"

  // if this is set to true, we would not include features that depend on answer options
  // note that this option is available, only when the classifier type is "Expanded".
  directAnswerQuestions = false

  // setting this true would cache the input annotations, as well as the scores of the classifiers
  useRedisCachingForAnnotation = false
  useRedisCachingForLearnerPredictions = false

  // the list of words given zero confidence score by the essential-terms classifier
  stopwordsDatastoreFile = "datastore://public/org.allenai.termselector/stopwords-v2.txt"

  // pre-trained model from data-store: SVM
  modelsDatastoreFolder = "datastore://public/org.allenai.termselector/models-v5"

  // list of popular science terms
  scienceTermsDatastoreFile = "datastore://public/org.allenai.nlp.resources/science_terms-v1.txt"

  // file containing the annotated questions with essentiality scores
  // only master train: turkerSalientTerms.tsv
  // only omnibus: turkerSalientTermsOnlyOmnibus.tsv
  // combined: turkerSalientTermsWithOmnibus.tsv
  turkerEssentialityScores = "datastore://public/org.allenai.termselector/turkerSalientTermsWithOmnibus-v3.tsv"

  // regents training questions; to exclude from the training set of essential-terms classifier
  regentsTrainingQuestion = "datastore://public/org.allenai.termselector/regentsTrain-v1.txt"

  // the parameters related to annotations used for the training/testing the the classifiers
  annotation {
    // if this is true, it will look up the missing salience scores; otherwise they will be ignored;
    // turn this option off, if you don't have access to salience annotator (at the cost of losing a few percent)
    checkForMissingSalienceScores = true

    // whether to drop training instances with mid-ranged scores;
    // if set to an array of two real numbers (e.g. [0.4, 0.6]) it will drop the training instances
    // in that range. If empty, it will be ignored.
    filterMidScoreConsitutents = []

    // if this is on, the constituents that belong to the same named-entity will be combined;
    // for example "New Orleans" is two constituents, but it will be collapsed to one, since
    // the constituents belong to one single named-entity.
    combineNamedEntities = false
  }
}

akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
